//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/isDatabaseEmpty", ReplyAction="http://tempuri.org/IDatabaseManager/isDatabaseEmptyResponse")]
        bool isDatabaseEmpty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/isDatabaseEmpty", ReplyAction="http://tempuri.org/IDatabaseManager/isDatabaseEmptyResponse")]
        System.Threading.Tasks.Task<bool> isDatabaseEmptyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Registration", ReplyAction="http://tempuri.org/IDatabaseManager/RegistrationResponse")]
        bool Registration(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Registration", ReplyAction="http://tempuri.org/IDatabaseManager/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SignIn", ReplyAction="http://tempuri.org/IDatabaseManager/SignInResponse")]
        string SignIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SignIn", ReplyAction="http://tempuri.org/IDatabaseManager/SignInResponse")]
        System.Threading.Tasks.Task<string> SignInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddOutputTagResponse")]
        string AddOutputTag(string tagName, string desc, string io, double init, double lowLimit, double highLimit, string type, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddOutputTagResponse")]
        System.Threading.Tasks.Task<string> AddOutputTagAsync(string tagName, string desc, string io, double init, double lowLimit, double highLimit, string type, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveInputTagResponse")]
        string RemoveInputTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveInputTagResponse")]
        System.Threading.Tasks.Task<string> RemoveInputTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddInputTagResponse")]
        string AddInputTag(string tagName, string desc, string io, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string type, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddInputTagResponse")]
        System.Threading.Tasks.Task<string> AddInputTagAsync(string tagName, string desc, string io, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string type, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveOutputTagResponse")]
        string RemoveOutputTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveOutputTagResponse")]
        System.Threading.Tasks.Task<string> RemoveOutputTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        string ChangeOutputValue(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task<string> ChangeOutputValueAsync(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValues", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValuesResponse")]
        string GetOutputValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValues", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValuesResponse")]
        System.Threading.Tasks.Task<string> GetOutputValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOnOff", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOnOffResponse")]
        string TurnScanOnOff(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOnOff", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOnOffResponse")]
        System.Threading.Tasks.Task<string> TurnScanOnOffAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        string AddAlarm(string tagName, string type, double limit, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        System.Threading.Tasks.Task<string> AddAlarmAsync(string tagName, string type, double limit, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        string RemoveAlarm(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ServiceReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IDatabaseManager>, DatabaseManager.ServiceReference.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool isDatabaseEmpty() {
            return base.Channel.isDatabaseEmpty();
        }
        
        public System.Threading.Tasks.Task<bool> isDatabaseEmptyAsync() {
            return base.Channel.isDatabaseEmptyAsync();
        }
        
        public bool Registration(string username, string password, string role) {
            return base.Channel.Registration(username, password, role);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password, string role) {
            return base.Channel.RegistrationAsync(username, password, role);
        }
        
        public string SignIn(string username, string password) {
            return base.Channel.SignIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> SignInAsync(string username, string password) {
            return base.Channel.SignInAsync(username, password);
        }
        
        public string AddOutputTag(string tagName, string desc, string io, double init, double lowLimit, double highLimit, string type, string unit) {
            return base.Channel.AddOutputTag(tagName, desc, io, init, lowLimit, highLimit, type, unit);
        }
        
        public System.Threading.Tasks.Task<string> AddOutputTagAsync(string tagName, string desc, string io, double init, double lowLimit, double highLimit, string type, string unit) {
            return base.Channel.AddOutputTagAsync(tagName, desc, io, init, lowLimit, highLimit, type, unit);
        }
        
        public string RemoveInputTag(string tagName) {
            return base.Channel.RemoveInputTag(tagName);
        }
        
        public System.Threading.Tasks.Task<string> RemoveInputTagAsync(string tagName) {
            return base.Channel.RemoveInputTagAsync(tagName);
        }
        
        public string AddInputTag(string tagName, string desc, string io, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string type, string unit) {
            return base.Channel.AddInputTag(tagName, desc, io, driver, scanTime, onOffScan, lowLimit, highLimit, type, unit);
        }
        
        public System.Threading.Tasks.Task<string> AddInputTagAsync(string tagName, string desc, string io, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string type, string unit) {
            return base.Channel.AddInputTagAsync(tagName, desc, io, driver, scanTime, onOffScan, lowLimit, highLimit, type, unit);
        }
        
        public string RemoveOutputTag(string tagName) {
            return base.Channel.RemoveOutputTag(tagName);
        }
        
        public System.Threading.Tasks.Task<string> RemoveOutputTagAsync(string tagName) {
            return base.Channel.RemoveOutputTagAsync(tagName);
        }
        
        public string ChangeOutputValue(string tagName, double value) {
            return base.Channel.ChangeOutputValue(tagName, value);
        }
        
        public System.Threading.Tasks.Task<string> ChangeOutputValueAsync(string tagName, double value) {
            return base.Channel.ChangeOutputValueAsync(tagName, value);
        }
        
        public string GetOutputValues() {
            return base.Channel.GetOutputValues();
        }
        
        public System.Threading.Tasks.Task<string> GetOutputValuesAsync() {
            return base.Channel.GetOutputValuesAsync();
        }
        
        public string TurnScanOnOff(string tagName) {
            return base.Channel.TurnScanOnOff(tagName);
        }
        
        public System.Threading.Tasks.Task<string> TurnScanOnOffAsync(string tagName) {
            return base.Channel.TurnScanOnOffAsync(tagName);
        }
        
        public string AddAlarm(string tagName, string type, double limit, int priority) {
            return base.Channel.AddAlarm(tagName, type, limit, priority);
        }
        
        public System.Threading.Tasks.Task<string> AddAlarmAsync(string tagName, string type, double limit, int priority) {
            return base.Channel.AddAlarmAsync(tagName, type, limit, priority);
        }
        
        public string RemoveAlarm(string tagName) {
            return base.Channel.RemoveAlarm(tagName);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagName) {
            return base.Channel.RemoveAlarmAsync(tagName);
        }
    }
}
